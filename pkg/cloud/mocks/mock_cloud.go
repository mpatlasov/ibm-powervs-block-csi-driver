// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/cloud/cloud_interface.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination=pkg/cloud/mocks/mock_cloud.go -source ./pkg/cloud/cloud_interface.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/IBM-Cloud/power-go-client/power/models"
	gomock "go.uber.org/mock/gomock"
	cloud "sigs.k8s.io/ibm-powervs-block-csi-driver/pkg/cloud"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// AttachDisk mocks base method.
func (m *MockCloud) AttachDisk(volumeID, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", volumeID, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachDisk indicates an expected call of AttachDisk.
func (mr *MockCloudMockRecorder) AttachDisk(volumeID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockCloud)(nil).AttachDisk), volumeID, nodeID)
}

// CloneDisk mocks base method.
func (m *MockCloud) CloneDisk(sourceVolumeName, cloneVolumeName string) (*cloud.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneDisk", sourceVolumeName, cloneVolumeName)
	ret0, _ := ret[0].(*cloud.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneDisk indicates an expected call of CloneDisk.
func (mr *MockCloudMockRecorder) CloneDisk(sourceVolumeName, cloneVolumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneDisk", reflect.TypeOf((*MockCloud)(nil).CloneDisk), sourceVolumeName, cloneVolumeName)
}

// CreateDisk mocks base method.
func (m *MockCloud) CreateDisk(volumeName string, diskOptions *cloud.DiskOptions) (*cloud.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisk", volumeName, diskOptions)
	ret0, _ := ret[0].(*cloud.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisk indicates an expected call of CreateDisk.
func (mr *MockCloudMockRecorder) CreateDisk(volumeName, diskOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk", reflect.TypeOf((*MockCloud)(nil).CreateDisk), volumeName, diskOptions)
}

// DeleteDisk mocks base method.
func (m *MockCloud) DeleteDisk(volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisk indicates an expected call of DeleteDisk.
func (mr *MockCloudMockRecorder) DeleteDisk(volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockCloud)(nil).DeleteDisk), volumeID)
}

// DetachDisk mocks base method.
func (m *MockCloud) DetachDisk(volumeID, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", volumeID, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk.
func (mr *MockCloudMockRecorder) DetachDisk(volumeID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockCloud)(nil).DetachDisk), volumeID, nodeID)
}

// GetDiskByID mocks base method.
func (m *MockCloud) GetDiskByID(volumeID string) (*cloud.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskByID", volumeID)
	ret0, _ := ret[0].(*cloud.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskByID indicates an expected call of GetDiskByID.
func (mr *MockCloudMockRecorder) GetDiskByID(volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskByID", reflect.TypeOf((*MockCloud)(nil).GetDiskByID), volumeID)
}

// GetDiskByName mocks base method.
func (m *MockCloud) GetDiskByName(name string) (*cloud.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskByName", name)
	ret0, _ := ret[0].(*cloud.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskByName indicates an expected call of GetDiskByName.
func (mr *MockCloudMockRecorder) GetDiskByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskByName", reflect.TypeOf((*MockCloud)(nil).GetDiskByName), name)
}

// GetDiskByNamePrefix mocks base method.
func (m *MockCloud) GetDiskByNamePrefix(namePrefix string) (*cloud.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskByNamePrefix", namePrefix)
	ret0, _ := ret[0].(*cloud.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskByNamePrefix indicates an expected call of GetDiskByNamePrefix.
func (mr *MockCloudMockRecorder) GetDiskByNamePrefix(namePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskByNamePrefix", reflect.TypeOf((*MockCloud)(nil).GetDiskByNamePrefix), namePrefix)
}

// GetPVMInstanceByID mocks base method.
func (m *MockCloud) GetPVMInstanceByID(instanceID string) (*cloud.PVMInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVMInstanceByID", instanceID)
	ret0, _ := ret[0].(*cloud.PVMInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVMInstanceByID indicates an expected call of GetPVMInstanceByID.
func (mr *MockCloudMockRecorder) GetPVMInstanceByID(instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVMInstanceByID", reflect.TypeOf((*MockCloud)(nil).GetPVMInstanceByID), instanceID)
}

// GetPVMInstanceByName mocks base method.
func (m *MockCloud) GetPVMInstanceByName(instanceName string) (*cloud.PVMInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVMInstanceByName", instanceName)
	ret0, _ := ret[0].(*cloud.PVMInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVMInstanceByName indicates an expected call of GetPVMInstanceByName.
func (mr *MockCloudMockRecorder) GetPVMInstanceByName(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVMInstanceByName", reflect.TypeOf((*MockCloud)(nil).GetPVMInstanceByName), instanceName)
}

// GetPVMInstanceDetails mocks base method.
func (m *MockCloud) GetPVMInstanceDetails(instanceID string) (*models.PVMInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVMInstanceDetails", instanceID)
	ret0, _ := ret[0].(*models.PVMInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVMInstanceDetails indicates an expected call of GetPVMInstanceDetails.
func (mr *MockCloudMockRecorder) GetPVMInstanceDetails(instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVMInstanceDetails", reflect.TypeOf((*MockCloud)(nil).GetPVMInstanceDetails), instanceID)
}

// IsAttached mocks base method.
func (m *MockCloud) IsAttached(volumeID, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAttached", volumeID, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAttached indicates an expected call of IsAttached.
func (mr *MockCloudMockRecorder) IsAttached(volumeID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAttached", reflect.TypeOf((*MockCloud)(nil).IsAttached), volumeID, nodeID)
}

// ResizeDisk mocks base method.
func (m *MockCloud) ResizeDisk(volumeID string, reqSize int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeDisk", volumeID, reqSize)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeDisk indicates an expected call of ResizeDisk.
func (mr *MockCloudMockRecorder) ResizeDisk(volumeID, reqSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeDisk", reflect.TypeOf((*MockCloud)(nil).ResizeDisk), volumeID, reqSize)
}

// UpdateStoragePoolAffinity mocks base method.
func (m *MockCloud) UpdateStoragePoolAffinity(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolAffinity", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolAffinity indicates an expected call of UpdateStoragePoolAffinity.
func (mr *MockCloudMockRecorder) UpdateStoragePoolAffinity(instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolAffinity", reflect.TypeOf((*MockCloud)(nil).UpdateStoragePoolAffinity), instanceID)
}

// WaitForCloneStatus mocks base method.
func (m *MockCloud) WaitForCloneStatus(taskId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCloneStatus", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCloneStatus indicates an expected call of WaitForCloneStatus.
func (mr *MockCloudMockRecorder) WaitForCloneStatus(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCloneStatus", reflect.TypeOf((*MockCloud)(nil).WaitForCloneStatus), taskId)
}

// WaitForVolumeState mocks base method.
func (m *MockCloud) WaitForVolumeState(volumeID, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForVolumeState", volumeID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForVolumeState indicates an expected call of WaitForVolumeState.
func (mr *MockCloudMockRecorder) WaitForVolumeState(volumeID, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForVolumeState", reflect.TypeOf((*MockCloud)(nil).WaitForVolumeState), volumeID, state)
}
